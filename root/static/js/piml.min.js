/* The PI Markup Language v0.1.0 by Kai MÃ¶rker */
function escapeHTMLEntities(e){return e.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;")}function escapePIMLEntities(e){return e.replace(/\\\*/g,"&ast;").replace(/\\_/g,"&lowbar;").replace(/\\\//g,"&sol;").replace(/\\`/g,"&grave;").replace(/\\\[/g,"&lsqb;").replace(/\\\]/g,"&rsqb;").replace(/\\\|/g,"&verbar;")}function replaceNewlines(e){return e.replace(/\n/g,"<br/>")}function parseColor(e){let r=new RegExp("\\[(.*?)\\|color=(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow|#[A-Fa-f0-9]{6})\\]","g");for(let l of e.matchAll(r)){let r=l[0],a=l[1],t=l[2];e=e.replace(r,`<span style="color: ${t};">${a}</span>`)}return e}function parse(e){let r;r=escapePIMLEntities(r=escapeHTMLEntities(e));let l={"/":"i",_:"u","*":"b","`":"tt"};for(let e in l){let a=new RegExp(`\\${e}(.*?)\\${e}`,"gs");for(let t of r.matchAll(a)){let a=t[0],p=t[1];r=r.replace(`${a}`,`<${l[e]}>${p}</${l[e]}>`)}}return r=replaceNewlines(r=parseColor(r))}export default{parse:parse};